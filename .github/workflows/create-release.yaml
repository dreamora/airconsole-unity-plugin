name: Create Release
on:
  workflow_dispatch:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        unityVersion:
          - 2022.3.62f1
          - 6000.0.50f1
        platform:
          - WebGL
          - Android

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Extract Version from C# File
      id: extract_version
      run: |
        version=$(grep -oP 'public const string VERSION = "\K[^"]+' Assets/AirConsole/scripts/Runtime/Settings.cs)
        echo "Extracted version: $version"
        echo "version=$version" >> $GITHUB_ENV

    - name: Validate Version
      run: |
        if [[ ! "${{ env.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format. Must be MAJOR.MINOR.PATCH"
          exit 1
        fi

    - name: Check GitHub Releases
      id: check_release
      run: |
        # Fetch releases from GitHub API
        releases=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/dreamora/airconsole-unity-plugin/releases")

        # Check if a release with the extracted version exists
        exists=$(echo "$releases" | jq -r --arg version "v${{ env.version }}" '.[] | select(.tag_name == $version) | .tag_name')

        if [[ -n "$exists" ]]; then
          echo "Release with version v${{ env.version }} already exists."
          exit 1
        else
          echo "No release with version v${{ env.version }} found."
        fi

    - uses: actions/cache@v3
      with:
        path: Library
        key: Library-AUP-${{ matrix.platform }}-${{ matrix.unityVersion }}
        restore-keys: |
          Library-AUP-${{ matrix.platform }}-
          Library-AUP-
          Library-
    #
    - name: Test ${{ matrix.platform }} in ${{ matrix.unityVersion }}
      uses: game-ci/unity-test-runner@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: ${{ matrix.unityVersion }}
        testMode: EditMode
        checkName: ${{ matrix.platform }} Test Results

    - name: Build ${{ matrix.platform }} in ${{ matrix.unityVersion }}
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: ${{ matrix.unityVersion }}
        targetPlatform: ${{ matrix.platform }}
        buildMethod: NDream.Unity.Builder.Build${{ matrix.platform }}
        allowDirtyBuild: true

    - name: Validate Build
      run: |
        if [ "${{ matrix.platform }}" == "Android" ]; then
          filepath="Builds/${{ matrix.platform }}/release-${{ matrix.unityVersion }}-v${{ env.version }}.apk"
          if [ ! -f "$filepath" ]; then
            echo "Build validation failed for ${{ matrix.platform }}"
            exit 1
          fi
        elif [ "${{ matrix.platform }}" == "WebGL" ]; then
          webgl_dir="Builds/${{ matrix.platform }}/release-${{ matrix.unityVersion }}-v${{ env.version }}"
          if [ ! -d "$webgl_dir" ]; then
            echo "WebGL build directory not found: $webgl_dir"
            exit 1
          fi
          # Zip the WebGL build directory
          cd "Builds/${{ matrix.platform }}"
          zip -r "release-${{ matrix.unityVersion }}-v${{ env.version }}.zip" "release-${{ matrix.unityVersion }}-v${{ env.version }}/"
          cd ../..
          if [ ! -f "Builds/${{ matrix.platform }}/release-${{ matrix.unityVersion }}-v${{ env.version }}.zip" ]; then
            echo "Failed to create WebGL zip file"
            exit 1
          fi
        fi

    - name: Extract release notes
      id: extract-release-notes
      uses: ffurrer2/extract-release-notes@v2
      with:
        # prerelease: true
        changelog_file: CHANGELOG.md

    - name: Log Release Notes
      run: echo "Release Notes are ${{ steps.extract-release-notes.outputs.release_notes }}"

    - name: Generate unitypackage release
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      if: matrix.platform == 'WebGL' && matrix.unityVersion == '2022.3.62f1'
      with:
        unityVersion: ${{ matrix.unityVersion }}
        targetPlatform: ${{ matrix.platform }}
        buildMethod: NDream.Unity.Packager.Export
        allowDirtyBuild: true

    - name: Validate release package
      if: matrix.platform == 'WebGL' && matrix.unityVersion == '2022.3.62f1'
      run: |
        filepath="Builds/airconsole-unity-plugin-v${{ env.version }}.unitypackage"
        if [ ! -f "$filepath" ]; then
          echo "Build validation of airconsole-unity-plugin-v${{ env.version }}.unitypackage failed"
          exit 1
        fi

    # Return License
    - name: Return license
      uses: game-ci/unity-return-license@v2
      if: always()

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: matrix.platform == 'WebGL' && matrix.unityVersion == '2022.3.62f1'
      with:
        tag_name: v${{ env.version }}
        name: Release v${{ env.version }}
        files: Builds/airconsole-unity-plugin-v${{ env.version }}.unitypackage
        body: ${{ steps.extract-release-notes.outputs.release_notes }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
